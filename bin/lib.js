// Generated by Haxe 4.0.0-rc.1+1fdd3d5
(function () { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var world = echo_Echo.start({ width : 64, height : 64, gravity_y : 5, iterations : 2});
	echo_Echo.make(world,{ shape : { type : 1, radius : 16}});
	echo_Echo.make(world,{ mass : 0, y : 48, shape : { type : 0, width : 10, height : 10}});
	echo_Echo.listen(world);
	new haxe_Timer(16).run = function() {
		echo_Echo.step(world,0.016);
		echo_util_Debug.log(world);
		return;
	};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = true;
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
var glib_IDisposable = function() { };
glib_IDisposable.__name__ = true;
var echo_IEcho = function() { };
echo_IEcho.__name__ = true;
var echo_Body = function(options) {
	this.id = ++echo_Body.ids;
	this.active = true;
	this.type = 0;
	var this1 = new hxmath_math_Vector2Default(0,0);
	this.set_position(this1);
	var this2 = new hxmath_math_Vector2Default(0,0);
	this.set_velocity(this2);
	var this3 = new hxmath_math_Vector2Default(0,0);
	this.set_acceleration(this3);
	var this4 = new hxmath_math_Vector2Default(0,0);
	this.set_max_velocity(this4);
	var this5 = new hxmath_math_Vector2Default(0,0);
	this.set_drag(this5);
	this.load(options);
};
echo_Body.__name__ = true;
echo_Body.__interfaces__ = [glib_IDisposable,echo_IEcho];
echo_Body.get_defaults = function() {
	return { solid : true, mass : 1, x : 0, y : 0, elasticity : 0, velocity_x : 0, velocity_y : 0, rotational_velocity : 0, max_velocity_x : 0, max_velocity_y : 0, max_rotational_velocity : 10000, drag_x : 0, drag_y : 0};
};
echo_Body.prototype = {
	load: function(options) {
		options = glib_Data.copy_fields(options,echo_Body.get_defaults());
		if(options.shape != null) {
			this.set_shape(echo_Shape.get(options.shape));
		}
		this.set_solid(options.solid);
		this.set_mass(options.mass);
		var self = this.get_position();
		self.x = options.x;
		self.y = options.y;
		this.set_elasticity(options.elasticity);
		var self1 = this.get_velocity();
		self1.x = options.velocity_x;
		self1.y = options.velocity_y;
		this.set_rotational_velocity(options.rotational_velocity);
		var self2 = this.get_max_velocity();
		self2.x = options.max_velocity_x;
		self2.y = options.max_velocity_y;
		this.set_max_rotational_velocity(options.max_rotational_velocity);
		var self3 = this.get_drag();
		self3.x = options.drag_x;
		self3.y = options.drag_y;
	}
	,push: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.get_acceleration().x += x;
		this.get_acceleration().y += y;
	}
	,bounds: function() {
		if(this.get_shape() == null) {
			return null;
		}
		var b = this.get_shape().to_aabb();
		var this1 = b.position;
		var a = this.get_position();
		var self = this1;
		self.x += a.x;
		self.y += a.y;
		return b;
	}
	,dispose: function() {
		this.get_shape().put();
		this.set_velocity(null);
		this.set_max_velocity(null);
		this.set_drag(null);
	}
	,get_shape: function() {
		return this.shape;
	}
	,get_mass: function() {
		return this.mass;
	}
	,get_solid: function() {
		return this.solid;
	}
	,get_x: function() {
		return this.get_position().x;
	}
	,get_y: function() {
		return this.get_position().y;
	}
	,get_position: function() {
		return this.position;
	}
	,get_rotation: function() {
		return this.rotation;
	}
	,get_elasticity: function() {
		return this.elasticity;
	}
	,get_velocity: function() {
		return this.velocity;
	}
	,get_acceleration: function() {
		return this.acceleration;
	}
	,get_rotational_velocity: function() {
		return this.rotational_velocity;
	}
	,get_max_velocity: function() {
		return this.max_velocity;
	}
	,get_max_rotational_velocity: function() {
		return this.max_rotational_velocity;
	}
	,get_drag: function() {
		return this.drag;
	}
	,set_shape: function(value) {
		return this.shape = value;
	}
	,set_mass: function(value) {
		if(value < 0.0001) {
			value = 0;
			this.inverse_mass = 0;
		} else {
			this.inverse_mass = 1 / value;
		}
		return this.mass = value;
	}
	,set_solid: function(value) {
		return this.solid = value;
	}
	,set_x: function(value) {
		return this.get_position().x = value;
	}
	,set_y: function(value) {
		return this.get_position().y = value;
	}
	,set_position: function(value) {
		return this.position = value;
	}
	,set_rotation: function(value) {
		return this.rotation = value;
	}
	,set_elasticity: function(value) {
		return this.elasticity = value;
	}
	,set_velocity: function(value) {
		return this.velocity = value;
	}
	,set_acceleration: function(value) {
		return this.acceleration = value;
	}
	,set_rotational_velocity: function(value) {
		return this.rotational_velocity = value;
	}
	,set_max_velocity: function(value) {
		return this.max_velocity = value;
	}
	,set_max_rotational_velocity: function(value) {
		return this.max_rotational_velocity = value;
	}
	,set_drag: function(value) {
		return this.drag = value;
	}
};
var echo_Collisions = function() { };
echo_Collisions.__name__ = true;
echo_Collisions.query = function(world) {
	if(world.quadtree != null) {
		world.quadtree.put();
	}
	var x = world.x + world.width * 0.5;
	var y = world.y + world.height * 0.5;
	var width = world.width;
	var height = world.height;
	var qt = echo_util_QuadTree._pool.get();
	var self = qt.position;
	self.x = x;
	self.y = y;
	qt.ex = width * 0.5;
	qt.ey = height * 0.5;
	qt.clear_children();
	qt.pooled = false;
	world.quadtree = qt;
	var _g = 0;
	var _g1 = world.members;
	while(_g < _g1.length) {
		var member = _g1[_g];
		++_g;
		member.collided = false;
		if(member.active) {
			var b = member.bounds();
			if(b != null) {
				world.quadtree.insert({ id : member.id, bounds : b, flag : false});
			}
		}
	}
	var _g2 = 0;
	var _g3 = world.listeners.members;
	while(_g2 < _g3.length) {
		var listener = _g3[_g2];
		++_g2;
		var results = [];
		switch(listener.a.type) {
		case 0:
			switch(listener.b.type) {
			case 0:
				var col = echo_Collisions.body_and_body(listener.a,listener.b);
				if(col != null) {
					results.push(col);
				}
				break;
			case 1:
				results = echo_Collisions.body_and_group(listener.a,listener.b,world.quadtree);
				break;
			}
			break;
		case 1:
			switch(listener.b.type) {
			case 0:
				results = echo_Collisions.body_and_group(listener.a,listener.b,world.quadtree);
				break;
			case 1:
				results = echo_Collisions.group_and_group(listener.a,listener.b,world.quadtree);
				break;
			}
			break;
		}
		listener.last_collisions = listener.collisions.slice();
		listener.collisions = [];
		var _g31 = 0;
		while(_g31 < results.length) {
			var result = [results[_g31]];
			++_g31;
			if(result[0].a.id == result[0].b.id) {
				continue;
			}
			if(listener.collisions.filter((function(result1) {
				return function(pair) {
					if(pair.a.id == result1[0].a.id && pair.b.id == result1[0].b.id) {
						return true;
					}
					if(pair.b.id == result1[0].a.id && pair.a.id == result1[0].b.id) {
						return true;
					}
					return false;
				};
			})(result)).length > 0) {
				continue;
			}
			var sa = result[0].a.get_shape().clone();
			var sb = result[0].b.get_shape().clone();
			var this1 = sa.position;
			var a = result[0].a.get_position();
			var self1 = this1;
			self1.x += a.x;
			self1.y += a.y;
			var this2 = sb.position;
			var a1 = result[0].b.get_position();
			var self2 = this2;
			self2.x += a1.x;
			self2.y += a1.y;
			result[0].data = sa.collides(sb);
			if(result[0].data == null) {
				continue;
			}
			result[0].a.collided = result[0].b.collided = true;
			listener.collisions.push(result[0]);
			sa.put();
			sb.put();
		}
	}
};
echo_Collisions.notify = function(world) {
	var _g = 0;
	var _g1 = world.listeners.members;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		if(listener.callback == null) {
			continue;
		}
		var _g2 = 0;
		var _g11 = listener.collisions;
		while(_g2 < _g11.length) {
			var collision = _g11[_g2];
			++_g2;
			listener.callback(collision.a,collision.b,collision.data);
		}
	}
};
echo_Collisions.group_and_group = function(a,b,quadtree) {
	if(a.members.length == 0 || b.members.length == 0) {
		return [];
	}
	var results = [];
	var _g = 0;
	var _g1 = a.members;
	while(_g < _g1.length) {
		var member = _g1[_g];
		++_g;
		if(member.active) {
			results = results.concat(echo_Collisions.body_and_group(member,b,quadtree));
		}
	}
	return results;
};
echo_Collisions.body_and_group = function(body,group,quadtree) {
	if(body.get_shape() == null || !body.active) {
		return [];
	}
	var bounds = body.bounds();
	var results = [];
	var _g = 0;
	var _g1 = quadtree.query(bounds);
	while(_g < _g1.length) {
		var result = [_g1[_g]];
		++_g;
		group.members.map((function(result1) {
			return function(member) {
				if(result1[0].id == member.id) {
					results.push({ a : body, b : member});
				}
				return;
			};
		})(result));
	}
	bounds.put();
	return results;
};
echo_Collisions.body_and_body = function(a,b) {
	if(a.get_shape() == null || b.get_shape() == null || !a.active || !b.active || a == b) {
		return null;
	}
	var ab = a.bounds();
	var bb = b.bounds();
	var col = echo_util_SAT.rect_and_rect(ab,bb);
	ab.put();
	bb.put();
	if(col == null) {
		return null;
	} else {
		return { a : a, b : b};
	}
};
var echo_Echo = function() { };
echo_Echo.__name__ = true;
echo_Echo.start = function(options) {
	return new echo_World(options);
};
echo_Echo.make = function(world,options) {
	return world.add(new echo_Body(options));
};
echo_Echo.listen = function(world,a,b,options) {
	if(a == null) {
		if(b == null) {
			return world.listeners.add(world,world,options);
		} else {
			return world.listeners.add(b,b,options);
		}
	}
	if(b == null) {
		return world.listeners.add(a,a,options);
	}
	return world.listeners.add(a,b,options);
};
echo_Echo.step = function(world,dt) {
	var fdt = dt / world.iterations;
	var _g = 0;
	var _g1 = world.iterations;
	while(_g < _g1) {
		var i = _g++;
		echo_Physics.step(world,fdt);
		echo_Collisions.query(world);
		echo_Physics.separate(world,fdt);
		echo_Collisions.notify(world);
	}
};
echo_Echo.undo = function(world) {
	return world;
};
echo_Echo.redo = function(world) {
	return world;
};
echo_Echo.collide = function(a,b,options) {
};
var echo_Group = function(members) {
	this.members = members == null ? [] : members;
	this.type = 1;
};
echo_Group.__name__ = true;
echo_Group.__interfaces__ = [glib_IDisposable,echo_IEcho];
echo_Group.prototype = {
	add: function(body) {
		HxOverrides.remove(this.members,body);
		this.members.push(body);
		return body;
	}
	,remove: function(body) {
		HxOverrides.remove(this.members,body);
		return body;
	}
	,clear: function() {
		this.members = [];
	}
	,dispose: function() {
		this.members = null;
	}
};
var echo_Listeners = function(world,members) {
	this.world = world;
	this.members = members == null ? [] : members;
};
echo_Listeners.__name__ = true;
echo_Listeners.__interfaces__ = [glib_IDisposable];
echo_Listeners.get_listener_defaults = function() {
	return { separate : true};
};
echo_Listeners.prototype = {
	add: function(a,b,options) {
		options = glib_Data.copy_fields(options,echo_Listeners.get_listener_defaults());
		var listener = { a : a, b : b, separate : options.separate, collisions : [], last_collisions : []};
		if(options.callback != null) {
			listener.callback = options.callback;
		}
		if(options.condition != null) {
			listener.condition = options.condition;
		}
		this.members.push(listener);
		return listener;
	}
	,remove: function(listener) {
		HxOverrides.remove(this.members,listener);
		return listener;
	}
	,clear: function() {
		this.members = [];
	}
	,dispose: function() {
		this.members = null;
	}
};
var echo_Physics = function() { };
echo_Physics.__name__ = true;
echo_Physics.step = function(world,dt) {
	var _g = 0;
	var _g1 = world.members;
	while(_g < _g1.length) {
		var member = _g1[_g];
		++_g;
		if(member.get_mass() > 0) {
			var _g2 = member;
			var a = _g2.get_acceleration();
			var b = world.gravity;
			var self = a;
			var this1 = new hxmath_math_Vector2Default(self.x,self.y);
			var self1 = this1;
			self1.x += b.x;
			self1.y += b.y;
			_g2.set_acceleration(self1);
		}
		var v = member.get_velocity().x;
		var a1 = member.get_acceleration().x;
		var d = member.get_drag().x;
		var m = member.get_max_velocity().x;
		var im = member.inverse_mass;
		if(a1 != 0) {
			v += a1 * im * dt;
		} else if(d != 0) {
			if(v - d > 0) {
				v -= d * im * dt;
			} else if(v + d < 0) {
				v += d * im * dt;
			} else {
				v = 0;
			}
		}
		if(m != 0) {
			var min = -m;
			v = v < min ? min : v > m ? m : v;
		}
		member.get_velocity().x = v;
		var v1 = member.get_velocity().y;
		var a2 = member.get_acceleration().y;
		var d1 = member.get_drag().y;
		var m1 = member.get_max_velocity().y;
		var im1 = member.inverse_mass;
		if(a2 != 0) {
			v1 += a2 * im1 * dt;
		} else if(d1 != 0) {
			if(v1 - d1 > 0) {
				v1 -= d1 * im1 * dt;
			} else if(v1 + d1 < 0) {
				v1 += d1 * im1 * dt;
			} else {
				v1 = 0;
			}
		}
		if(m1 != 0) {
			var min1 = -m1;
			v1 = v1 < min1 ? min1 : v1 > m1 ? m1 : v1;
		}
		member.get_velocity().y = v1;
		var this2 = member.get_position();
		var self2 = member.get_velocity();
		var this3 = new hxmath_math_Vector2Default(self2.x,self2.y);
		var self3 = this3;
		self3.x *= dt;
		self3.y *= dt;
		var a3 = self3;
		var self4 = this2;
		self4.x += a3.x;
		self4.y += a3.y;
		var _g3 = member;
		_g3.set_rotation(_g3.get_rotation() + member.get_rotational_velocity() * dt);
		var self5 = member.get_acceleration();
		self5.x = 0;
		self5.y = 0;
	}
};
echo_Physics.separate = function(world,dt) {
	var _g = 0;
	var _g1 = world.listeners.members;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		if(listener.separate) {
			var _g2 = 0;
			var _g11 = listener.collisions;
			while(_g2 < _g11.length) {
				var collision = _g11[_g2];
				++_g2;
				echo_Physics.resolve(collision.a,collision.b,collision.data);
			}
		}
	}
};
echo_Physics.resolve = function(a,b,cd) {
	if(!a.get_solid() || !b.get_solid() || a.get_mass() == 0 && b.get_mass() == 0) {
		return;
	}
	var a1 = a.get_velocity();
	var b1 = b.get_velocity();
	var self = a1;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x -= b1.x;
	self1.y -= b1.y;
	var rv = self1;
	var b2 = cd.normal;
	var vel_to_normal = rv.x * b2.x + rv.y * b2.y;
	var inv_mass_sum = a.inverse_mass + b.inverse_mass;
	if(vel_to_normal > 0) {
		var e = (a.get_elasticity() + b.get_elasticity()) * 0.5;
		var j = -(1 + e) * vel_to_normal / inv_mass_sum;
		var s = -j;
		var self2 = cd.normal;
		var this2 = new hxmath_math_Vector2Default(self2.x,self2.y);
		var self3 = this2;
		self3.x *= s;
		self3.y *= s;
		var impulse = self3;
		var mass_sum = a.get_mass() + b.get_mass();
		var ratio = a.get_mass() / mass_sum;
		var this3 = a.get_velocity();
		var s1 = a.inverse_mass;
		var self4 = impulse;
		var this4 = new hxmath_math_Vector2Default(self4.x,self4.y);
		var self5 = this4;
		self5.x *= s1;
		self5.y *= s1;
		var a2 = self5;
		var self6 = this3;
		self6.x -= a2.x;
		self6.y -= a2.y;
		ratio = b.get_mass() / mass_sum;
		var this5 = b.get_velocity();
		var s2 = b.inverse_mass;
		var self7 = impulse;
		var this6 = new hxmath_math_Vector2Default(self7.x,self7.y);
		var self8 = this6;
		self8.x *= s2;
		self8.y *= s2;
		var a3 = self8;
		var self9 = this5;
		self9.x += a3.x;
		self9.y += a3.y;
	}
	var s3 = Math.max(cd.overlap - 0.013,0) / inv_mass_sum * 0.8;
	var self10 = cd.normal;
	var this7 = new hxmath_math_Vector2Default(self10.x,self10.y);
	var self11 = this7;
	self11.x *= s3;
	self11.y *= s3;
	var correction = self11;
	var this8 = a.get_position();
	var s4 = a.inverse_mass;
	var self12 = correction;
	var this9 = new hxmath_math_Vector2Default(self12.x,self12.y);
	var self13 = this9;
	self13.x *= s4;
	self13.y *= s4;
	var a4 = self13;
	var self14 = this8;
	self14.x -= a4.x;
	self14.y -= a4.y;
	var this10 = b.get_position();
	var s5 = b.inverse_mass;
	var self15 = correction;
	var this11 = new hxmath_math_Vector2Default(self15.x,self15.y);
	var self16 = this11;
	self16.x *= s5;
	self16.y *= s5;
	var a5 = self16;
	var self17 = this10;
	self17.x += a5.x;
	self17.y += a5.y;
};
echo_Physics.compute_velocity = function(v,a,d,m,im,dt) {
	if(a != 0) {
		v += a * im * dt;
	} else if(d != 0) {
		if(v - d > 0) {
			v -= d * im * dt;
		} else if(v + d < 0) {
			v += d * im * dt;
		} else {
			v = 0;
		}
	}
	if(m != 0) {
		var min = -m;
		v = v < min ? min : v > m ? m : v;
	}
	return v;
};
var echo_Shape = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new hxmath_math_Vector2Default(x,y);
	this.position = this1;
};
echo_Shape.__name__ = true;
echo_Shape.get = function(options) {
	options = glib_Data.copy_fields(options,echo_Shape.get_defaults());
	switch(options.type) {
	case 0:
		var x = options.offset_x;
		var y = options.offset_y;
		var width = options.width;
		var height = options.height;
		var rect = echo_shape_Rect._pool.get();
		var self = rect.position;
		self.x = x;
		self.y = y;
		rect.ex = width * 0.5;
		rect.ey = height * 0.5;
		rect.pooled = false;
		return rect;
	case 1:
		var x1 = options.offset_x;
		var y1 = options.offset_y;
		var radius = options.radius;
		var circle = echo_shape_Circle._pool.get();
		var self1 = circle.position;
		self1.x = x1;
		self1.y = y1;
		circle.radius = radius;
		circle.pooled = false;
		return circle;
	case 2:
		throw new js__$Boot_HaxeError("Polygon Shape has not been implemented");
	}
};
echo_Shape.rect = function(x,y,width,height) {
	var rect = echo_shape_Rect._pool.get();
	var self = rect.position;
	self.x = x;
	self.y = y;
	rect.ex = width * 0.5;
	rect.ey = height * 0.5;
	rect.pooled = false;
	return rect;
};
echo_Shape.square = function(x,y,width) {
	var rect = echo_shape_Rect._pool.get();
	var self = rect.position;
	self.x = x;
	self.y = y;
	rect.ex = width * 0.5;
	rect.ey = width * 0.5;
	rect.pooled = false;
	return rect;
};
echo_Shape.circle = function(x,y,radius) {
	var circle = echo_shape_Circle._pool.get();
	var self = circle.position;
	self.x = x;
	self.y = y;
	circle.radius = radius;
	circle.pooled = false;
	return circle;
};
echo_Shape.get_defaults = function() {
	return { type : 0, radius : 8, width : 16, height : 16, points : [], rotation : 0, offset_x : 0, offset_y : 0};
};
echo_Shape.prototype = {
	put: function() {
	}
	,to_aabb: function(rect) {
		if(rect == null) {
			var x = this.get_x();
			var y = this.get_y();
			var rect1 = echo_shape_Rect._pool.get();
			var self = rect1.position;
			self.x = x;
			self.y = y;
			rect1.ex = 0.;
			rect1.ey = 0.;
			rect1.pooled = false;
			return rect1;
		} else {
			var x1 = this.get_x();
			var y1 = this.get_y();
			var self1 = rect.position;
			self1.x = x1;
			self1.y = y1;
			rect.ex = 0.;
			rect.ey = 0.;
			return rect;
		}
	}
	,clone: function() {
		return new echo_Shape(this.get_x(),this.get_y());
	}
	,scale: function(v) {
	}
	,contains: function(v) {
		var a = this.position;
		if(!(a == null && v == null)) {
			if(a != null && v != null && a.x == v.x) {
				return a.y == v.y;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,intersects: function(l) {
		return null;
	}
	,overlaps: function(s) {
		return this.contains(s.position);
	}
	,collides: function(s) {
		return null;
	}
	,collide_rect: function(r) {
		return null;
	}
	,collide_circle: function(c) {
		return null;
	}
	,get_x: function() {
		return this.position.x;
	}
	,get_y: function() {
		return this.position.y;
	}
	,get_top: function() {
		return this.position.y;
	}
	,get_bottom: function() {
		return this.position.y;
	}
	,get_left: function() {
		return this.position.x;
	}
	,get_right: function() {
		return this.position.x;
	}
	,set_x: function(value) {
		return this.position.x = value;
	}
	,set_y: function(value) {
		return this.position.y = value;
	}
};
var echo_World = function(options) {
	echo_Group.call(this,options.members);
	var tmp;
	if(options.width < 1) {
		throw new js__$Boot_HaxeError("World must have a width of at least 1");
	} else {
		tmp = options.width;
	}
	this.width = tmp;
	var tmp1;
	if(options.height < 1) {
		throw new js__$Boot_HaxeError("World must have a width of at least 1");
	} else {
		tmp1 = options.height;
	}
	this.height = tmp1;
	this.x = options.x == null ? 0 : options.x;
	this.y = options.y == null ? 0 : options.y;
	var this1 = new hxmath_math_Vector2Default(options.gravity_x == null ? 0 : options.gravity_x,options.gravity_y == null ? 0 : options.gravity_y);
	this.gravity = this1;
	var qt = echo_util_QuadTree._pool.get();
	var self = qt.position;
	self.x = 0;
	self.y = 0;
	qt.ex = 0.;
	qt.ey = 0.;
	qt.clear_children();
	qt.pooled = false;
	this.quadtree = qt;
	this.listeners = new echo_Listeners(this,options.listeners);
	this.iterations = options.iterations == null ? 5 : options.iterations;
};
echo_World.__name__ = true;
echo_World.__super__ = echo_Group;
echo_World.prototype = $extend(echo_Group.prototype,{
	clear: function() {
		echo_Group.prototype.clear.call(this);
		this.listeners.clear();
	}
	,dispose: function() {
		echo_Group.prototype.dispose.call(this);
		this.gravity = null;
		this.quadtree.put();
		this.listeners.dispose();
		this.listeners = null;
		this.history = null;
	}
});
var glib_IPooled = function() { };
glib_IPooled.__name__ = true;
var glib_IPool = function() { };
glib_IPool.__name__ = true;
var glib_Pool = function(clazz) {
	this.clazz = clazz;
	this.pool = [];
	this.count = 0;
};
glib_Pool.__name__ = true;
glib_Pool.__interfaces__ = [glib_IPool];
glib_Pool.prototype = {
	get: function() {
		if(this.count == 0) {
			return Type.createInstance(this.clazz,[]);
		}
		return this.pool[--this.count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this.pool.indexOf(obj);
			if(i == -1 || i >= this.count) {
				this.pool[this.count++] = obj;
			}
		}
	}
	,put_unsafe: function(obj) {
		if(obj != null) {
			this.pool[this.count++] = obj;
		}
	}
	,pre_allocate: function(amount) {
		while(amount-- > 0) this.pool[this.count++] = Type.createInstance(this.clazz,[]);
	}
	,clear: function() {
		this.count = 0;
		var old_pool = this.pool;
		this.pool = [];
		return old_pool;
	}
	,get_length: function() {
		return this.count;
	}
};
var echo_shape_Circle = function() {
	echo_Shape.call(this);
	this.type = 1;
	this.radius = 0;
};
echo_shape_Circle.__name__ = true;
echo_shape_Circle.__interfaces__ = [glib_IPooled];
echo_shape_Circle.get = function(x,y,radius) {
	if(radius == null) {
		radius = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var circle = echo_shape_Circle._pool.get();
	var self = circle.position;
	self.x = x;
	self.y = y;
	circle.radius = radius;
	circle.pooled = false;
	return circle;
};
echo_shape_Circle.get_pool = function() {
	return echo_shape_Circle._pool;
};
echo_shape_Circle.__super__ = echo_Shape;
echo_shape_Circle.prototype = $extend(echo_Shape.prototype,{
	put: function() {
		if(!this.pooled) {
			this.pooled = true;
			echo_shape_Circle._pool.put_unsafe(this);
		}
	}
	,set: function(x,y,radius) {
		if(radius == null) {
			radius = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var self = this.position;
		self.x = x;
		self.y = y;
		this.radius = radius;
		return this;
	}
	,load: function(circle) {
		var x = circle.get_x();
		var y = circle.get_y();
		var self = this.position;
		self.x = x;
		self.y = y;
		this.radius = circle.radius;
		return this;
	}
	,to_aabb: function(rect) {
		if(rect == null) {
			var x = this.get_x();
			var y = this.get_y();
			var width = this.radius * 2;
			var height = this.radius * 2;
			var rect1 = echo_shape_Rect._pool.get();
			var self = rect1.position;
			self.x = x;
			self.y = y;
			rect1.ex = width * 0.5;
			rect1.ey = height * 0.5;
			rect1.pooled = false;
			return rect1;
		} else {
			var x1 = this.get_x();
			var y1 = this.get_y();
			var width1 = this.radius * 2;
			var height1 = this.radius * 2;
			var self1 = rect.position;
			self1.x = x1;
			self1.y = y1;
			rect.ex = width1 * 0.5;
			rect.ey = height1 * 0.5;
			return rect;
		}
	}
	,clone: function() {
		var x = this.get_x();
		var y = this.get_y();
		var radius = this.radius;
		var circle = echo_shape_Circle._pool.get();
		var self = circle.position;
		self.x = x;
		self.y = y;
		circle.radius = radius;
		circle.pooled = false;
		return circle;
	}
	,contains: function(v) {
		var b = this.position;
		var self = v;
		var self1 = self;
		var this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
		var self2 = this1;
		self2.x -= b.x;
		self2.y -= b.y;
		var self3 = self2;
		return Math.sqrt(self3.x * self3.x + self3.y * self3.y) < this.radius;
	}
	,intersects: function(l) {
		return null;
	}
	,overlaps: function(s) {
		return s.collides(this) != null;
	}
	,collides: function(s) {
		return s.collide_circle(this);
	}
	,collide_rect: function(r) {
		return echo_util_SAT.rect_and_circle(r,this,true);
	}
	,collide_circle: function(c) {
		return echo_util_SAT.circle_and_circle(c,this);
	}
	,get_diameter: function() {
		return this.radius * 2;
	}
	,get_top: function() {
		return this.get_y() - this.radius;
	}
	,get_bottom: function() {
		return this.get_y() + this.radius;
	}
	,get_left: function() {
		return this.get_x() - this.radius;
	}
	,get_right: function() {
		return this.get_x() + this.radius;
	}
	,set_diameter: function(value) {
		this.radius = value * 0.5;
		return value;
	}
});
var echo_shape_Line = function(x,y,dx,dy) {
	if(dy == null) {
		dy = 1;
	}
	if(dx == null) {
		dx = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = new hxmath_math_Vector2Default(x,y);
	this.start = this1;
	var this2 = new hxmath_math_Vector2Default(dx,dy);
	this.end = this2;
};
echo_shape_Line.__name__ = true;
echo_shape_Line.prototype = {
	contains: function(v) {
		var m = (this.get_dy() - this.get_y()) / (this.get_dx() - this.get_y());
		var b = this.get_y() - m * this.get_x();
		return v.y == m * v.x + b;
	}
	,get_x: function() {
		return this.start.x;
	}
	,get_y: function() {
		return this.start.y;
	}
	,get_dx: function() {
		return this.end.x;
	}
	,get_dy: function() {
		return this.end.y;
	}
	,get_length: function() {
		var b = this.end;
		var self = this.start;
		var self1 = self;
		var this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
		var self2 = this1;
		self2.x -= b.x;
		self2.y -= b.y;
		var self3 = self2;
		return Math.sqrt(self3.x * self3.x + self3.y * self3.y);
	}
	,set_x: function(value) {
		return this.start.x = value;
	}
	,set_y: function(value) {
		return this.start.y = value;
	}
	,set_dx: function(value) {
		return this.end.x = value;
	}
	,set_dy: function(value) {
		return this.end.y = value;
	}
};
var echo_shape_Rect = function() {
	echo_Shape.call(this);
	this.ex = 0;
	this.ey = 0;
	this.type = 0;
};
echo_shape_Rect.__name__ = true;
echo_shape_Rect.__interfaces__ = [glib_IPooled];
echo_shape_Rect.get = function(x,y,width,height) {
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var rect = echo_shape_Rect._pool.get();
	var self = rect.position;
	self.x = x;
	self.y = y;
	rect.ex = width * 0.5;
	rect.ey = height * 0.5;
	rect.pooled = false;
	return rect;
};
echo_shape_Rect.get_from_vectors = function(a,b) {
	var rect = echo_shape_Rect._pool.get();
	var y = Math.min(a.y,b.y);
	var width = Math.abs(b.x - a.x);
	var height = Math.abs(b.y - a.y);
	var self = rect.position;
	self.x = Math.min(a.x,b.x);
	self.y = y;
	rect.ex = width * 0.5;
	rect.ey = height * 0.5;
	rect.pooled = false;
	return rect;
};
echo_shape_Rect.get_pool = function() {
	return echo_shape_Rect._pool;
};
echo_shape_Rect.__super__ = echo_Shape;
echo_shape_Rect.prototype = $extend(echo_Shape.prototype,{
	put: function() {
		if(!this.pooled) {
			this.pooled = true;
			echo_shape_Rect._pool.put_unsafe(this);
		}
	}
	,set: function(x,y,width,height) {
		if(height == null) {
			height = 1;
		}
		if(width == null) {
			width = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var self = this.position;
		self.x = x;
		self.y = y;
		this.ex = width * 0.5;
		this.ey = height * 0.5;
		return this;
	}
	,load: function(rect) {
		this.position = rect.position;
		this.ex = rect.ex;
		this.ey = rect.ey;
		return this;
	}
	,to_aabb: function(rect) {
		if(rect == null) {
			var x = this.get_x();
			var y = this.get_y();
			var width = this.ex * 2;
			var height = this.ey * 2;
			var rect1 = echo_shape_Rect._pool.get();
			var self = rect1.position;
			self.x = x;
			self.y = y;
			rect1.ex = width * 0.5;
			rect1.ey = height * 0.5;
			rect1.pooled = false;
			return rect1;
		} else {
			var x1 = this.get_x();
			var y1 = this.get_y();
			var width1 = this.ex * 2;
			var height1 = this.ey * 2;
			var self1 = rect.position;
			self1.x = x1;
			self1.y = y1;
			rect.ex = width1 * 0.5;
			rect.ey = height1 * 0.5;
			return rect;
		}
	}
	,clone: function() {
		var x = this.get_x();
		var y = this.get_y();
		var width = this.ex * 2;
		var height = this.ey * 2;
		var rect = echo_shape_Rect._pool.get();
		var self = rect.position;
		self.x = x;
		self.y = y;
		rect.ex = width * 0.5;
		rect.ey = height * 0.5;
		rect.pooled = false;
		return rect;
	}
	,contains: function(p) {
		if(this.get_x() - this.ex <= p.x && this.get_x() + this.ex >= p.x && this.get_y() - this.ey <= p.x) {
			return this.get_y() + this.ey >= p.y;
		} else {
			return false;
		}
	}
	,intersects: function(l) {
		return null;
	}
	,overlaps: function(s) {
		return s.collides(this) != null;
	}
	,collides: function(s) {
		return s.collide_rect(this);
	}
	,collide_rect: function(r) {
		return echo_util_SAT.rect_and_rect(r,this);
	}
	,collide_circle: function(c) {
		return echo_util_SAT.rect_and_circle(this,c);
	}
	,get_width: function() {
		return this.ex * 2;
	}
	,get_height: function() {
		return this.ey * 2;
	}
	,get_min: function() {
		var this1 = new hxmath_math_Vector2Default(this.get_x() - this.ex,this.get_y() - this.ey);
		return this1;
	}
	,get_max: function() {
		var this1 = new hxmath_math_Vector2Default(this.get_y() + this.ey,this.get_x() + this.ex);
		return this1;
	}
	,get_top: function() {
		return this.get_y() - this.ey;
	}
	,get_bottom: function() {
		return this.get_y() + this.ey;
	}
	,get_left: function() {
		return this.get_x() - this.ex;
	}
	,get_right: function() {
		return this.get_x() + this.ex;
	}
	,set_width: function(value) {
		this.ex = value * 0.5;
		return value;
	}
	,set_height: function(value) {
		this.ey = value * 0.5;
		return value;
	}
});
var echo_util_Debug = function() {
	this.draw_quadtree = true;
	this.draw_bodies = true;
};
echo_util_Debug.__name__ = true;
echo_util_Debug.log = function(world) {
	console.log("echo/util/Debug.hx:16:","World State:");
	var _g = 0;
	var _g1 = world.members;
	while(_g < _g1.length) {
		var member = _g1[_g];
		++_g;
		console.log("echo/util/Debug.hx:18:"," - Body #" + member.id + " { x: " + member.get_x() + " , y: " + member.get_y() + ", colliding: " + (member.collided == null ? "null" : "" + member.collided) + " }");
	}
};
echo_util_Debug.prototype = {
	draw: function(world) {
		this.clear();
		if(this.draw_quadtree) {
			this.draw_qd(world.quadtree);
		}
		if(this.draw_bodies) {
			var _g = 0;
			var _g1 = world.members;
			while(_g < _g1.length) {
				var body = _g1[_g];
				++_g;
				if(body.get_shape() != null) {
					switch(body.get_shape().type) {
					case 0:
						var r = body.get_shape();
						this.draw_rect(r.get_x() - r.ex + body.get_x(),r.get_y() - r.ey + body.get_y(),r.ex * 2,r.ey * 2,this.shape_fill_color,body.collided ? this.shape_collided_color : this.shape_color,0.2);
						break;
					case 1:
						var c = body.get_shape();
						this.draw_circle(c.get_x() + body.get_x(),c.get_y() + body.get_y(),c.radius,this.shape_fill_color,body.collided ? this.shape_collided_color : this.shape_color,0.2);
						break;
					case 2:
						break;
					}
				}
			}
		}
	}
	,draw_line: function(from_x,from_y,to_x,to_y,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
	}
	,draw_rect: function(x,y,width,height,color,stroke,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
	}
	,draw_circle: function(x,y,radius,color,stroke,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
	}
	,clear: function() {
	}
	,draw_qd: function(tree) {
		var _g = 0;
		var _g1 = tree.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.draw_rect(child.get_x() - child.ex,child.get_y() - child.ey,child.ex * 2,child.ey * 2,this.quadtree_fill_color,this.quadtree_color,0.2);
			this.draw_qd(child);
		}
	}
};
var echo_util_QuadTree = function(rect,depth) {
	if(depth == null) {
		depth = 0;
	}
	echo_shape_Rect.call(this);
	if(rect != null) {
		this.position = rect.position;
		this.ex = rect.ex;
		this.ey = rect.ey;
	}
	this.depth = depth;
	this.children = [];
	this.contents = [];
};
echo_util_QuadTree.__name__ = true;
echo_util_QuadTree.__interfaces__ = [glib_IPooled];
echo_util_QuadTree.get = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var qt = echo_util_QuadTree._pool.get();
	var self = qt.position;
	self.x = x;
	self.y = y;
	qt.ex = width * 0.5;
	qt.ey = height * 0.5;
	qt.clear_children();
	qt.pooled = false;
	return qt;
};
echo_util_QuadTree.get_pool = function() {
	return echo_util_QuadTree._pool;
};
echo_util_QuadTree.__super__ = echo_shape_Rect;
echo_util_QuadTree.prototype = $extend(echo_shape_Rect.prototype,{
	put: function() {
		if(!this.pooled) {
			this.pooled = true;
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.put();
			}
			this.children = [];
			var _g2 = 0;
			var _g3 = this.contents;
			while(_g2 < _g3.length) {
				var data = _g3[_g2];
				++_g2;
				data.bounds.put();
			}
			this.contents = [];
			echo_util_QuadTree._pool.put_unsafe(this);
		}
	}
	,insert: function(data) {
		if(echo_util_SAT.rect_and_rect(this,data.bounds) == null) {
			return;
		}
		if(this.get_leaf() && this.contents.length + 1 > echo_util_QuadTree.max_objects) {
			this.split();
		}
		if(this.get_leaf()) {
			this.contents.push(data);
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.insert(data);
			}
		}
	}
	,remove: function(data) {
		if(this.get_leaf()) {
			HxOverrides.remove(this.contents,data);
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.remove(data);
			}
		}
		this.shake();
	}
	,update: function(data) {
		this.remove(data);
		this.insert(data);
	}
	,query: function(shape) {
		var result = [];
		if(shape.collides(this) == null) {
			return result;
		}
		if(this.get_leaf()) {
			var _g = 0;
			var _g1 = this.contents;
			while(_g < _g1.length) {
				var data = _g1[_g];
				++_g;
				if(shape.collides(data.bounds) != null) {
					result.push(data);
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = this.children;
			while(_g2 < _g11.length) {
				var child = _g11[_g2];
				++_g2;
				var recurse = child.query(shape);
				if(recurse.length > 0) {
					result = result.concat(recurse);
				}
			}
		}
		return result;
	}
	,shake: function() {
		if(!this.get_leaf()) {
			var len = this.get_count();
			if(len == 0) {
				this.clear_children();
			} else if(len < echo_util_QuadTree.max_objects) {
				var nodes = new haxe_ds_List();
				nodes.push(this);
				while(nodes.length > 0) {
					var node = nodes.first();
					if(node.get_leaf()) {
						var _g = 0;
						var _g1 = node.contents;
						while(_g < _g1.length) {
							var data = _g1[_g];
							++_g;
							if(this.contents.indexOf(data) == -1) {
								this.contents.push(data);
							}
						}
					} else {
						var _g2 = 0;
						var _g11 = node.children;
						while(_g2 < _g11.length) {
							var child = _g11[_g2];
							++_g2;
							nodes.add(child);
						}
					}
					nodes.pop();
				}
				this.clear_children();
			}
		}
	}
	,split: function() {
		if(this.depth + 1 >= echo_util_QuadTree.max_depth) {
			return;
		}
		var xw = this.ex * 0.5;
		var xh = this.ey * 0.5;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			switch(i) {
			case 0:
				var tmp = this.children;
				var x = this.get_x() - xw;
				var y = this.get_y() - xh;
				var width = this.ex;
				var height = this.ey;
				var qt = echo_util_QuadTree._pool.get();
				var self = qt.position;
				self.x = x;
				self.y = y;
				qt.ex = width * 0.5;
				qt.ey = height * 0.5;
				qt.clear_children();
				qt.pooled = false;
				tmp.push(qt);
				break;
			case 1:
				var tmp1 = this.children;
				var x1 = this.get_x() + xw;
				var y1 = this.get_y() - xh;
				var width1 = this.ex;
				var height1 = this.ey;
				var qt1 = echo_util_QuadTree._pool.get();
				var self1 = qt1.position;
				self1.x = x1;
				self1.y = y1;
				qt1.ex = width1 * 0.5;
				qt1.ey = height1 * 0.5;
				qt1.clear_children();
				qt1.pooled = false;
				tmp1.push(qt1);
				break;
			case 2:
				var tmp2 = this.children;
				var x2 = this.get_x() - xw;
				var y2 = this.get_y() + xh;
				var width2 = this.ex;
				var height2 = this.ey;
				var qt2 = echo_util_QuadTree._pool.get();
				var self2 = qt2.position;
				self2.x = x2;
				self2.y = y2;
				qt2.ex = width2 * 0.5;
				qt2.ey = height2 * 0.5;
				qt2.clear_children();
				qt2.pooled = false;
				tmp2.push(qt2);
				break;
			case 3:
				var tmp3 = this.children;
				var x3 = this.get_x() + xw;
				var y3 = this.get_y() + xh;
				var width3 = this.ex;
				var height3 = this.ey;
				var qt3 = echo_util_QuadTree._pool.get();
				var self3 = qt3.position;
				self3.x = x3;
				self3.y = y3;
				qt3.ex = width3 * 0.5;
				qt3.ey = height3 * 0.5;
				qt3.clear_children();
				qt3.pooled = false;
				tmp3.push(qt3);
				break;
			}
			this.children[i].depth = this.depth + 1;
			var _g1 = 0;
			var _g11 = this.contents.length;
			while(_g1 < _g11) {
				var j = _g1++;
				this.children[i].insert(this.contents[j]);
			}
		}
		this.contents = [];
	}
	,reset: function() {
		if(this.get_leaf()) {
			var _g = 0;
			var _g1 = this.contents;
			while(_g < _g1.length) {
				var data = _g1[_g];
				++_g;
				data.flag = false;
			}
		} else {
			var _g2 = 0;
			var _g11 = this.children;
			while(_g2 < _g11.length) {
				var child = _g11[_g2];
				++_g2;
				child.reset();
			}
		}
	}
	,clear_children: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.contents.length = 0;
			child.clear_children();
			child.put();
		}
		this.children.length = 0;
	}
	,get_count: function() {
		this.reset();
		var num = 0;
		var _g = 0;
		var _g1 = this.contents;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			data.flag = true;
			++num;
		}
		var nodes = new haxe_ds_List();
		nodes.push(this);
		while(nodes.length > 0) {
			var node = nodes.first();
			if(node.get_leaf()) {
				var _g2 = 0;
				var _g3 = node.contents;
				while(_g2 < _g3.length) {
					var data1 = _g3[_g2];
					++_g2;
					if(!data1.flag) {
						++num;
						data1.flag = true;
					}
				}
			} else {
				var _g21 = 0;
				var _g31 = node.children;
				while(_g21 < _g31.length) {
					var child = _g31[_g21];
					++_g21;
					nodes.add(child);
				}
			}
			nodes.pop();
		}
		this.reset();
		return num;
	}
	,get_leaf: function() {
		return this.children.length == 0;
	}
});
var echo_util_SAT = function() { };
echo_util_SAT.__name__ = true;
echo_util_SAT.point_in_rect = function(p,r) {
	if(r.get_x() - r.ex <= p.x && r.get_x() + r.ex >= p.x && r.get_y() - r.ey <= p.x) {
		return r.get_y() + r.ey >= p.y;
	} else {
		return false;
	}
};
echo_util_SAT.point_in_circle = function(p,c) {
	var b = c.position;
	var self = p;
	var self1 = self;
	var this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this1;
	self2.x -= b.x;
	self2.y -= b.y;
	var self3 = self2;
	return Math.sqrt(self3.x * self3.x + self3.y * self3.y) < c.radius;
};
echo_util_SAT.rect_contains = function(r,p) {
	if(r.get_x() - r.ex <= p.x && r.get_x() + r.ex >= p.x && r.get_y() - r.ey <= p.x) {
		return r.get_y() + r.ey >= p.y;
	} else {
		return false;
	}
};
echo_util_SAT.circle_contains = function(c,p) {
	var b = c.position;
	var self = p;
	var self1 = self;
	var this1 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this1;
	self2.x -= b.x;
	self2.y -= b.y;
	var self3 = self2;
	return Math.sqrt(self3.x * self3.x + self3.y * self3.y) < c.radius;
};
echo_util_SAT.line_interects_rect = function(l,r) {
	return null;
};
echo_util_SAT.line_intersects_circle = function(l,c) {
	return null;
};
echo_util_SAT.rect_intersects = function(r,l) {
	return null;
};
echo_util_SAT.circle_intersects = function(c,l) {
	return null;
};
echo_util_SAT.rect_and_rect = function(rect1,rect2,flip) {
	if(flip == null) {
		flip = false;
	}
	var s1 = flip ? rect2 : rect1;
	var s2 = flip ? rect1 : rect2;
	var b = s1.position;
	var self = s2.position;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x -= b.x;
	self1.y -= b.y;
	var n = self1;
	var x_overlap = s1.ex + s2.ex - Math.abs(n.x);
	if(x_overlap > 0) {
		var y_overlap = s1.ey + s2.ey - Math.abs(n.y);
		if(y_overlap > 0) {
			if(x_overlap < y_overlap) {
				var tmp;
				if(n.x < 0) {
					var this2 = new hxmath_math_Vector2Default(-1,0);
					tmp = this2;
				} else {
					var this3 = new hxmath_math_Vector2Default(1,0);
					tmp = this3;
				}
				return { normal : tmp, overlap : x_overlap};
			} else {
				var tmp1;
				if(n.y < 0) {
					var this4 = new hxmath_math_Vector2Default(0,-1);
					tmp1 = this4;
				} else {
					var this5 = new hxmath_math_Vector2Default(0,1);
					tmp1 = this5;
				}
				return { normal : tmp1, overlap : y_overlap};
			}
		}
	}
	return null;
};
echo_util_SAT.circle_and_circle = function(circle1,circle2,flip) {
	if(flip == null) {
		flip = false;
	}
	var s1 = flip ? circle2 : circle1;
	var s2 = flip ? circle1 : circle2;
	var b = s1.position;
	var self = s2.position;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x -= b.x;
	self1.y -= b.y;
	var n = self1;
	var r = s1.radius + s2.radius;
	var self2 = n;
	var d = self2.x * self2.x + self2.y * self2.y;
	if(d >= r * r) {
		return null;
	} else if(d == 0) {
		var s11 = s1.radius;
		var this2 = new hxmath_math_Vector2Default(1,0);
		return { overlap : s11, normal : this2};
	} else {
		d = Math.sqrt(d);
		var self3 = n;
		var this3 = new hxmath_math_Vector2Default(self3.x,self3.y);
		var self4 = this3;
		self4.x /= d;
		self4.y /= d;
		return { overlap : r - d, normal : self4};
	}
};
echo_util_SAT.rect_and_circle = function(r,c,flip) {
	if(flip == null) {
		flip = false;
	}
	var n;
	if(flip) {
		var b = r.position;
		var self = c.position;
		var this1 = new hxmath_math_Vector2Default(self.x,self.y);
		var self1 = this1;
		self1.x -= b.x;
		self1.y -= b.y;
		n = self1;
	} else {
		var b1 = c.position;
		var self2 = r.position;
		var this2 = new hxmath_math_Vector2Default(self2.x,self2.y);
		var self3 = this2;
		self3.x -= b1.x;
		self3.y -= b1.y;
		n = self3;
	}
	var self4 = n;
	var this3 = new hxmath_math_Vector2Default(self4.x,self4.y);
	var closest = this3;
	var ex = (r.get_x() + r.ex - (r.get_x() - r.ex)) / 2;
	var ey = (r.get_y() + r.ey - (r.get_y() - r.ey)) / 2;
	var value = closest.x;
	var min = -ex;
	closest.x = value < min ? min : value > ex ? ex : value;
	var value1 = closest.y;
	var min1 = -ey;
	closest.y = value1 < min1 ? min1 : value1 > ey ? ey : value1;
	var inside = false;
	if(n == null && closest == null || n != null && closest != null && n.x == closest.x && n.y == closest.y) {
		inside = true;
		if(Math.abs(n.x) > Math.abs(n.y)) {
			closest.x = closest.x > 0 ? ex : -ex;
		} else {
			closest.y = closest.y > 0 ? ey : -ey;
		}
	}
	var self5 = n;
	var this4 = new hxmath_math_Vector2Default(self5.x,self5.y);
	var self6 = this4;
	self6.x -= closest.x;
	self6.y -= closest.y;
	var normal = self6;
	var self7 = normal;
	var d = self7.x * self7.x + self7.y * self7.y;
	var rad = c.radius;
	if(d > rad * rad && !inside) {
		return null;
	}
	d = Math.sqrt(d);
	var self8 = normal;
	var self9 = self8;
	var length = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
	if(length > 0.0) {
		var self10 = self8;
		self10.x /= length;
		self10.y /= length;
	}
	var tmp;
	if(inside) {
		var self11 = normal;
		var this5 = new hxmath_math_Vector2Default(self11.x,self11.y);
		var self12 = this5;
		self12.x *= -1;
		self12.y *= -1;
		tmp = self12;
	} else {
		tmp = normal;
	}
	return { normal : tmp, overlap : rad - d};
};
var glib__$Color_Color_$Impl_$ = {};
glib__$Color_Color_$Impl_$.__name__ = true;
glib__$Color_Color_$Impl_$.fromInt = function(Value) {
	return glib__$Color_Color_$Impl_$._new(Value);
};
glib__$Color_Color_$Impl_$.fromRGB = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = glib__$Color_Color_$Impl_$._new();
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return color;
};
glib__$Color_Color_$Impl_$.fromRGBFloat = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = glib__$Color_Color_$Impl_$._new();
	var Value = Math.round(Red * 255);
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value1 = Math.round(Green * 255);
	color &= -65281;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value2 = Math.round(Blue * 255);
	color &= -256;
	color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value3 = Math.round(Alpha * 255);
	color &= 16777215;
	color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
	return color;
};
glib__$Color_Color_$Impl_$.fromCMYK = function(Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = glib__$Color_Color_$Impl_$._new();
	var Value = (1 - Cyan) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	color &= -16711681;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value2 = (1 - Magenta) * (1 - Black);
	var Value3 = Math.round(Value2 * 255);
	color &= -65281;
	color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 8;
	var Value4 = (1 - Yellow) * (1 - Black);
	var Value5 = Math.round(Value4 * 255);
	color &= -256;
	color |= Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5;
	var Value6 = Math.round(Alpha * 255);
	color &= 16777215;
	color |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 24;
	return color;
};
glib__$Color_Color_$Impl_$.fromHSB = function(Hue,Saturation,Brightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = glib__$Color_Color_$Impl_$._new();
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		color &= -65281;
		color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(match * 255);
		color &= -256;
		color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(match * 255);
		color &= -256;
		color |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(match * 255);
		color &= -16711681;
		color |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		color &= -256;
		color |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(match * 255);
		color &= -16711681;
		color |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		color &= -65281;
		color |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		color &= -256;
		color |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(match * 255);
		color &= -65281;
		color |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		color &= -256;
		color |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(match * 255);
		color &= -65281;
		color |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		color &= -256;
		color |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return color;
};
glib__$Color_Color_$Impl_$.fromHSL = function(Hue,Saturation,Lightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = glib__$Color_Color_$Impl_$._new();
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		color &= -65281;
		color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(match * 255);
		color &= -256;
		color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(match * 255);
		color &= -256;
		color |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(match * 255);
		color &= -16711681;
		color |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		color &= -256;
		color |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(match * 255);
		color &= -16711681;
		color |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		color &= -65281;
		color |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		color &= -256;
		color |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(match * 255);
		color &= -65281;
		color |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		color &= -256;
		color |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(match * 255);
		color &= -65281;
		color |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		color &= -256;
		color |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return color;
};
glib__$Color_Color_$Impl_$.fromString = function(str) {
	var result = null;
	str = StringTools.trim(str);
	if(glib__$Color_Color_$Impl_$.COLOR_REGEX.match(str)) {
		var hexColor = "0x" + glib__$Color_Color_$Impl_$.COLOR_REGEX.matched(2);
		result = glib__$Color_Color_$Impl_$._new(Std.parseInt(hexColor));
		if(hexColor.length == 8) {
			var Value = Math.round(255);
			result &= 16777215;
			result |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		}
	}
	return result;
};
glib__$Color_Color_$Impl_$.getHSBColorWheel = function(Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < 360) {
		var c = _g1++;
		_g.push(glib__$Color_Color_$Impl_$.fromHSB(c,1.0,1.0,Alpha));
	}
	return _g;
};
glib__$Color_Color_$Impl_$.interpolate = function(Color1,Color2,Factor) {
	if(Factor == null) {
		Factor = 0.5;
	}
	var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
	var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
	var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
	var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
	var color = glib__$Color_Color_$Impl_$._new();
	color &= -16711681;
	color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
	color &= -65281;
	color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
	color &= -256;
	color |= b > 255 ? 255 : b < 0 ? 0 : b;
	color &= 16777215;
	color |= (a > 255 ? 255 : a < 0 ? 0 : a) << 24;
	return color;
};
glib__$Color_Color_$Impl_$.gradient = function(Color1,Color2,Steps,Ease) {
	var output = [];
	if(Ease == null) {
		Ease = function(t) {
			return t;
		};
	}
	var _g = 0;
	var _g1 = Steps;
	while(_g < _g1) {
		var step = _g++;
		var Factor = Ease(step / (Steps - 1));
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var color = glib__$Color_Color_$Impl_$._new();
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (a > 255 ? 255 : a < 0 ? 0 : a) << 24;
		output[step] = color;
	}
	return output;
};
glib__$Color_Color_$Impl_$.multiply = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
	var Green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
	var Blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
	var color = glib__$Color_Color_$Impl_$._new();
	var Value = Math.round(Red * 255);
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value1 = Math.round(Green * 255);
	color &= -65281;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value2 = Math.round(Blue * 255);
	color &= -256;
	color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value3 = Math.round(255);
	color &= 16777215;
	color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
	return color;
};
glib__$Color_Color_$Impl_$.add = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) + (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) + (rhs >> 8 & 255);
	var Blue = (lhs & 255) + (rhs & 255);
	var color = glib__$Color_Color_$Impl_$._new();
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= -16777216;
	return color;
};
glib__$Color_Color_$Impl_$.subtract = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) - (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (rhs >> 8 & 255);
	var Blue = (lhs & 255) - (rhs & 255);
	var color = glib__$Color_Color_$Impl_$._new();
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= -16777216;
	return color;
};
glib__$Color_Color_$Impl_$.to24Bit = function(this1) {
	return this1 & 16777215;
};
glib__$Color_Color_$Impl_$.toHexString = function(this1,Alpha,Prefix) {
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return (Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
glib__$Color_Color_$Impl_$.toWebString = function(this1) {
	return "#" + ("" + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
};
glib__$Color_Color_$Impl_$.getInverted = function(this1) {
	var oldAlpha = this1 >> 24 & 255;
	var lhs = -1;
	var Red = (lhs >> 16 & 255) - (this1 >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (this1 >> 8 & 255);
	var Blue = (lhs & 255) - (this1 & 255);
	var color = glib__$Color_Color_$Impl_$._new();
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= -16777216;
	var output = color;
	output &= 16777215;
	output |= (oldAlpha > 255 ? 255 : oldAlpha < 0 ? 0 : oldAlpha) << 24;
	return output;
};
glib__$Color_Color_$Impl_$.setRGB = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	this1 &= -16711681;
	this1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	this1 &= -65281;
	this1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	this1 &= -256;
	this1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	this1 &= 16777215;
	this1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return this1;
};
glib__$Color_Color_$Impl_$.setRGBFloat = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value = Math.round(Red * 255);
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value1 = Math.round(Green * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value2 = Math.round(Blue * 255);
	this1 &= -256;
	this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value3 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
	return this1;
};
glib__$Color_Color_$Impl_$.setCMYK = function(this1,Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value = (1 - Cyan) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value2 = (1 - Magenta) * (1 - Black);
	var Value3 = Math.round(Value2 * 255);
	this1 &= -65281;
	this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 8;
	var Value4 = (1 - Yellow) * (1 - Black);
	var Value5 = Math.round(Value4 * 255);
	this1 &= -256;
	this1 |= Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5;
	var Value6 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 24;
	return this1;
};
glib__$Color_Color_$Impl_$.setHSB = function(this1,Hue,Saturation,Brightness,Alpha) {
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return this1;
};
glib__$Color_Color_$Impl_$.setHSL = function(this1,Hue,Saturation,Lightness,Alpha) {
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return this1;
};
glib__$Color_Color_$Impl_$.setHSChromaMatch = function(this1,Hue,Saturation,Chroma,Match,Alpha) {
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + Match;
	Chroma += Match;
	switch(hueD | 0) {
	case 0:
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(Match * 255);
		this1 &= -256;
		this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(Match * 255);
		this1 &= -256;
		this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return this1;
};
glib__$Color_Color_$Impl_$._new = function(Value) {
	if(Value == null) {
		Value = 0;
	}
	var this1 = Value;
	return this1;
};
glib__$Color_Color_$Impl_$.getThis = function(this1) {
	return this1;
};
glib__$Color_Color_$Impl_$.validate = function(this1) {
};
glib__$Color_Color_$Impl_$.get_red = function(this1) {
	return this1 >> 16 & 255;
};
glib__$Color_Color_$Impl_$.get_green = function(this1) {
	return this1 >> 8 & 255;
};
glib__$Color_Color_$Impl_$.get_blue = function(this1) {
	return this1 & 255;
};
glib__$Color_Color_$Impl_$.get_alpha = function(this1) {
	return this1 >> 24 & 255;
};
glib__$Color_Color_$Impl_$.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
glib__$Color_Color_$Impl_$.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
glib__$Color_Color_$Impl_$.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
glib__$Color_Color_$Impl_$.get_alphaFloat = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
glib__$Color_Color_$Impl_$.set_red = function(this1,Value) {
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	return Value;
};
glib__$Color_Color_$Impl_$.set_green = function(this1,Value) {
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	return Value;
};
glib__$Color_Color_$Impl_$.set_blue = function(this1,Value) {
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return Value;
};
glib__$Color_Color_$Impl_$.set_alpha = function(this1,Value) {
	this1 &= 16777215;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return Value;
};
glib__$Color_Color_$Impl_$.set_redFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	return Value;
};
glib__$Color_Color_$Impl_$.set_greenFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	return Value;
};
glib__$Color_Color_$Impl_$.set_blueFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return Value;
};
glib__$Color_Color_$Impl_$.set_alphaFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= 16777215;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
	return Value;
};
glib__$Color_Color_$Impl_$.get_cyan = function(this1) {
	return (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
glib__$Color_Color_$Impl_$.get_magenta = function(this1) {
	return (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
glib__$Color_Color_$Impl_$.get_yellow = function(this1) {
	return (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
glib__$Color_Color_$Impl_$.get_black = function(this1) {
	return 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
glib__$Color_Color_$Impl_$.set_cyan = function(this1,Value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var Value1 = (1 - Value) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value3 = (1 - Magenta) * (1 - Black);
	var Value4 = Math.round(Value3 * 255);
	this1 &= -65281;
	this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 8;
	var Value5 = (1 - Yellow) * (1 - Black);
	var Value6 = Math.round(Value5 * 255);
	this1 &= -256;
	this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
	var Value7 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
	return Value;
};
glib__$Color_Color_$Impl_$.set_magenta = function(this1,Value) {
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var Value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value3 = (1 - Value) * (1 - Black);
	var Value4 = Math.round(Value3 * 255);
	this1 &= -65281;
	this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 8;
	var Value5 = (1 - Yellow) * (1 - Black);
	var Value6 = Math.round(Value5 * 255);
	this1 &= -256;
	this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
	var Value7 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
	return Value;
};
glib__$Color_Color_$Impl_$.set_yellow = function(this1,Value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var Value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value3 = (1 - Magenta) * (1 - Black);
	var Value4 = Math.round(Value3 * 255);
	this1 &= -65281;
	this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 8;
	var Value5 = (1 - Value) * (1 - Black);
	var Value6 = Math.round(Value5 * 255);
	this1 &= -256;
	this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
	var Value7 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
	return Value;
};
glib__$Color_Color_$Impl_$.set_black = function(this1,Value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var Value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Value);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value3 = (1 - Magenta) * (1 - Value);
	var Value4 = Math.round(Value3 * 255);
	this1 &= -65281;
	this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 8;
	var Value5 = (1 - Yellow) * (1 - Value);
	var Value6 = Math.round(Value5 * 255);
	this1 &= -256;
	this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
	var Value7 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
	return Value;
};
glib__$Color_Color_$Impl_$.get_hue = function(this1) {
	var hueRad = Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	var hue = 0;
	if(hueRad != 0) {
		hue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	}
	if(hue < 0) {
		return hue + 360;
	} else {
		return hue;
	}
};
glib__$Color_Color_$Impl_$.get_brightness = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
glib__$Color_Color_$Impl_$.get_saturation = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
glib__$Color_Color_$Impl_$.get_lightness = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2;
};
glib__$Color_Color_$Impl_$.set_hue = function(this1,Value) {
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Brightness - chroma;
	var Hue = Value;
	var Chroma = chroma;
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return Value;
};
glib__$Color_Color_$Impl_$.set_saturation = function(this1,Value) {
	var Hue = glib__$Color_Color_$Impl_$.get_hue(this1);
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * Value;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return Value;
};
glib__$Color_Color_$Impl_$.set_brightness = function(this1,Value) {
	var Hue = glib__$Color_Color_$Impl_$.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Value * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Value - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return Value;
};
glib__$Color_Color_$Impl_$.set_lightness = function(this1,Value) {
	var Hue = glib__$Color_Color_$Impl_$.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * Value - 1)) * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 %= 360;
	var hueD = Hue1 / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma += match;
	switch(hueD | 0) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return Value;
};
glib__$Color_Color_$Impl_$.maxColor = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
glib__$Color_Color_$Impl_$.minColor = function(this1) {
	return Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
glib__$Color_Color_$Impl_$.boundChannel = function(this1,Value) {
	if(Value > 255) {
		return 255;
	} else if(Value < 0) {
		return 0;
	} else {
		return Value;
	}
};
var glib_Data = function() { };
glib_Data.__name__ = true;
glib_Data.copy_fields = function(from,into) {
	if(from == null) {
		return into;
	}
	if(into == null) {
		into = Reflect.copy(from);
	} else {
		var _g = 0;
		var _g1 = Reflect.fields(from);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			into[f] = Reflect.field(from,f);
		}
	}
	return into;
};
glib_Data.copy_fields_c = function(from,into) {
	if(into == null) {
		into = { };
	}
	if(from != null) {
		var _g = 0;
		var _g1 = Reflect.fields(from);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var d = Reflect.field(from,f);
			if(f.indexOf("color") == 0) {
				if(typeof(d) == "string") {
					into[f] = glib__$Color_Color_$Impl_$.fromString(d);
					continue;
				}
			}
			if(Reflect.isObject(d) && !(((d) instanceof Array) && d.__enum__ == null) && typeof(d) != "string") {
				if(!Object.prototype.hasOwnProperty.call(into,f)) {
					into[f] = { };
				}
				glib_Data.copy_fields(d,Reflect.field(into,f));
				continue;
			}
			into[f] = Reflect.field(from,f);
		}
	}
	return into;
};
var glib_Disposable = function() { };
glib_Disposable.__name__ = true;
glib_Disposable.dispose = function(object) {
	if(object != null) {
		object.dispose();
	}
	return null;
};
glib_Disposable.disposeArray = function(array) {
	if(array != null) {
		var _g = 0;
		while(_g < array.length) {
			var e = array[_g];
			++_g;
			glib_Disposable.dispose(e);
		}
		array.splice(0,array.length);
	}
	return null;
};
var glib_Log = function() {
	this._all = [];
	this._info = [];
	this._warn = [];
	this._error = [];
	this.suppress = false;
	this.quiet = false;
};
glib_Log.__name__ = true;
glib_Log.__interfaces__ = [glib_IDisposable];
glib_Log.prototype = {
	dispose: function() {
		while(this._all.length > 0) this._all.pop();
		while(this._info.length > 0) this._info.pop();
		while(this._warn.length > 0) this._warn.pop();
		while(this._error.length > 0) this._error.pop();
	}
	,info: function(message) {
		var message1 = message;
		var type = "INFO";
		if(!this.suppress) {
			message1 = "" + type + ": " + message1;
			if(!this.quiet) {
				console.log("glib/Log.hx:66:",message1);
			}
			this._all.push(message1);
			switch(type) {
			case "ERROR":
				this._error.push(message1);
				break;
			case "INFO":
				this._info.push(message1);
				break;
			case "WARN":
				this._warn.push(message1);
				break;
			}
		}
	}
	,warn: function(message) {
		var message1 = message;
		var type = "WARN";
		if(!this.suppress) {
			message1 = "" + type + ": " + message1;
			if(!this.quiet) {
				console.log("glib/Log.hx:66:",message1);
			}
			this._all.push(message1);
			switch(type) {
			case "ERROR":
				this._error.push(message1);
				break;
			case "INFO":
				this._info.push(message1);
				break;
			case "WARN":
				this._warn.push(message1);
				break;
			}
		}
	}
	,error: function(message) {
		var message1 = message;
		var type = "ERROR";
		if(!this.suppress) {
			message1 = "" + type + ": " + message1;
			if(!this.quiet) {
				console.log("glib/Log.hx:66:",message1);
			}
			this._all.push(message1);
			switch(type) {
			case "ERROR":
				this._error.push(message1);
				break;
			case "INFO":
				this._info.push(message1);
				break;
			case "WARN":
				this._warn.push(message1);
				break;
			}
		}
	}
	,log: function(message,type) {
		if(this.suppress) {
			return;
		}
		message = "" + type + ": " + message;
		if(!this.quiet) {
			console.log("glib/Log.hx:66:",message);
		}
		this._all.push(message);
		switch(type) {
		case "ERROR":
			this._error.push(message);
			break;
		case "INFO":
			this._info.push(message);
			break;
		case "WARN":
			this._warn.push(message);
			break;
		}
	}
	,get: function(type) {
		if(type == null) {
			return this._all;
		}
		switch(type) {
		case "ERROR":
			return this._error;
		case "INFO":
			return this._info;
		case "WARN":
			return this._warn;
		}
	}
	,from_json: function(value) {
		return JSON.stringify(value,null,"  ");
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
var hxmath_math_IntVector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
hxmath_math_IntVector2Default.__name__ = true;
hxmath_math_IntVector2Default.prototype = {
	toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
};
var hxmath_math__$IntVector2_IntVector2_$Impl_$ = {};
hxmath_math__$IntVector2_IntVector2_$Impl_$.__name__ = true;
hxmath_math__$IntVector2_IntVector2_$Impl_$._new = function(x,y) {
	var this1 = new hxmath_math_IntVector2Default(x,y);
	return this1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(rawData[0],rawData[1]);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.toVector2 = function(this1) {
	var self = this1;
	var this2 = new hxmath_math_Vector2Default(self.x,self.y);
	return this2;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.multiply = function(a,s) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	self1.x *= s;
	self1.y *= s;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.add = function(a,b) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	self1.x += b.x;
	self1.y += b.y;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.subtract = function(a,b) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	self1.x -= b.x;
	self1.y -= b.y;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.negate = function(a) {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(-a.x,-a.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.max = function(a,b) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	var a1 = self1.x;
	var b1 = b.x;
	self1.x = b1 > a1 ? b1 : a1;
	var a2 = self1.y;
	var b2 = b.y;
	self1.y = b2 > a2 ? b2 : a2;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.min = function(a,b) {
	var self = a;
	var self1 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
	var a1 = self1.x;
	var b1 = b.x;
	self1.x = b1 < a1 ? b1 : a1;
	var a2 = self1.y;
	var b2 = b.y;
	self1.y = b2 < a2 ? b2 : a2;
	return self1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b > a1 ? b : a1;
	var a2 = self.y;
	var b1 = a.y;
	self.y = b1 > a2 ? b1 : a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	var a1 = self.x;
	var b = a.x;
	self.x = b < a1 ? b : a1;
	var a2 = self.y;
	var b1 = a.y;
	self.y = b1 < a2 ? b1 : a2;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.x;
	var self2 = target;
	self2.x = value;
	var self3 = self;
	var value1 = self3.y;
	var self4 = target;
	self4.y = value1;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.clone = function(this1) {
	var self = this1;
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self.x,self.y);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.x);
	var self2 = self;
	self2.x = value;
	var self3 = self;
	var value1 = func(self3.y);
	var self4 = self;
	self4.y = value1;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_zero = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,0);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_xAxis = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(1,0);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_yAxis = function() {
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(0,1);
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = self;
	var self2 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self1.x,self1.y);
	var newX = -self2.y;
	self2.y = self2.x;
	self2.x = newX;
	return self2;
};
hxmath_math__$IntVector2_IntVector2_$Impl_$.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = self;
	var self2 = hxmath_math__$IntVector2_IntVector2_$Impl_$._new(self1.x,self1.y);
	var newX = self2.y;
	self2.y = -self2.x;
	self2.x = newX;
	return self2;
};
var hxmath_math_MathUtil = function() { };
hxmath_math_MathUtil.__name__ = true;
hxmath_math_MathUtil.intMax = function(a,b) {
	if(b > a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.intMin = function(a,b) {
	if(b < a) {
		return b;
	} else {
		return a;
	}
};
hxmath_math_MathUtil.lerpCyclic = function(a,b,t,max) {
	if(Math.abs(a - b) > 0.5 * max) {
		if(a < b) {
			a += max;
		} else {
			b += max;
		}
	}
	var x = (1.0 - t) * a + t * b;
	if(x < 0) {
		return max - -x % max;
	} else {
		return x % max;
	}
};
hxmath_math_MathUtil.sign = function(x,w) {
	if(w == null) {
		w = 0;
	}
	if(Math.abs(x) < w) {
		return 0;
	} else if(x <= -w) {
		return -1;
	} else {
		return 1;
	}
};
hxmath_math_MathUtil.rangeDistance = function(aStart,aWidth,bStart,bWidth) {
	if(aStart + aWidth < bStart) {
		return bStart - (aStart + aWidth);
	} else if(bStart + bWidth < aStart) {
		return aStart - (bStart + bWidth);
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.openRangeContains = function(aStart,aWidth,x) {
	if(x > aStart) {
		return x < aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.openRangesIntersect = function(aStart,aWidth,bStart,bWidth) {
	return !(aStart >= bStart + bWidth || bStart >= aStart + aWidth);
};
hxmath_math_MathUtil.closedRangeContains = function(aStart,aWidth,x) {
	if(x >= aStart) {
		return x <= aStart + aWidth;
	} else {
		return false;
	}
};
hxmath_math_MathUtil.radToDeg = function(rad) {
	return 180 / Math.PI * rad;
};
hxmath_math_MathUtil.degToRad = function(deg) {
	return Math.PI / 180 * deg;
};
hxmath_math_MathUtil.wrap = function(x,n) {
	if(x < 0) {
		return n - -x % n;
	} else {
		return x % n;
	}
};
hxmath_math_MathUtil.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
hxmath_math_MathUtil.orient2d = function(a,b,c) {
	var result = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);
	if(result > 0) {
		return 1;
	} else if(result < 0) {
		return -1;
	} else {
		return 0;
	}
};
hxmath_math_MathUtil.det2x2 = function(m00,m10,m01,m11) {
	return m00 * m11 - m10 * m01;
};
hxmath_math_MathUtil.det3x3 = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	return m00 * (m11 * m22 - m21 * m12) - m10 * (m01 * m22 - m21 * m02) + m20 * (m01 * m12 - m11 * m02);
};
hxmath_math_MathUtil.det4x4 = function(m00,m10,m20,m30,m01,m11,m21,m31,m02,m12,m22,m32,m03,m13,m23,m33) {
	return m00 * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)) - m10 * (m01 * (m22 * m33 - m32 * m23) - m21 * (m02 * m33 - m32 * m03) + m31 * (m02 * m23 - m22 * m03)) + m20 * (m01 * (m12 * m33 - m32 * m13) - m11 * (m02 * m33 - m32 * m03) + m31 * (m02 * m13 - m12 * m03)) - m30 * (m01 * (m12 * m23 - m22 * m13) - m11 * (m02 * m23 - m22 * m03) + m21 * (m02 * m13 - m12 * m03));
};
var hxmath_math_Vector2Default = function(x,y) {
	this.x = x;
	this.y = y;
};
hxmath_math_Vector2Default.__name__ = true;
hxmath_math_Vector2Default.prototype = {
	toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
};
var hxmath_math__$Vector2_Vector2_$Impl_$ = {};
hxmath_math__$Vector2_Vector2_$Impl_$.__name__ = true;
hxmath_math__$Vector2_Vector2_$Impl_$._new = function(x,y) {
	var this1 = new hxmath_math_Vector2Default(x,y);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromArray = function(rawData) {
	if(rawData.length != 2) {
		throw new js__$Boot_HaxeError("Invalid rawData.");
	}
	var this1 = new hxmath_math_Vector2Default(rawData[0],rawData[1]);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromPolar = function(angle,radius) {
	var this1 = new hxmath_math_Vector2Default(radius * Math.cos(angle),radius * Math.sin(angle));
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.fromVector2Shape = function(other) {
	var this1 = new hxmath_math_Vector2Default(other.x,other.y);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.toIntVector2 = function(this1,func) {
	var self = this1;
	if(func == null) {
		func = function(x) {
			return x | 0;
		};
	}
	return hxmath_math__$IntVector2_IntVector2_$Impl_$._new(func(self.x),func(self.y));
};
hxmath_math__$Vector2_Vector2_$Impl_$.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.multiply = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x *= s;
	self1.y *= s;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.divide = function(a,s) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x /= s;
	self1.y /= s;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.add = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x += b.x;
	self1.y += b.y;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.subtract = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x -= b.x;
	self1.y -= b.y;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.negate = function(a) {
	var this1 = new hxmath_math_Vector2Default(-a.x,-a.y);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.equals = function(a,b) {
	if(!(a == null && b == null)) {
		if(a != null && b != null && a.x == b.x) {
			return a.y == b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.lerp = function(a,b,t) {
	var this1 = new hxmath_math_Vector2Default((1.0 - t) * a.x + t * b.x,(1.0 - t) * a.y + t * b.y);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.max = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x = Math.max(self1.x,b.x);
	self1.y = Math.max(self1.y,b.y);
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.min = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	self1.x = Math.min(self1.x,b.x);
	self1.y = Math.min(self1.y,b.y);
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.project = function(a,b) {
	var self = a;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	var s = (self1.x * b.x + self1.y * b.y) / (b.x * b.x + b.y * b.y);
	var self2 = b;
	var self3 = self2;
	var value = self3.x;
	var self4 = self1;
	self4.x = value;
	var self5 = self2;
	var value1 = self5.y;
	var self6 = self1;
	self6.y = value1;
	var self7 = self1;
	self7.x *= s;
	self7.y *= s;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.reflect = function(v,normal) {
	var self = v;
	var this1 = new hxmath_math_Vector2Default(self.x,self.y);
	var self1 = this1;
	var self2 = self1;
	var this2 = new hxmath_math_Vector2Default(self2.x,self2.y);
	var self3 = this2;
	var s = (self3.x * normal.x + self3.y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var self4 = normal;
	var self5 = self4;
	var value = self5.x;
	var self6 = self3;
	self6.x = value;
	var self7 = self4;
	var value1 = self7.y;
	var self8 = self3;
	self8.y = value1;
	var self9 = self3;
	self9.x *= s;
	self9.y *= s;
	var projected = self3;
	var self10 = projected;
	self10.x *= 2.0;
	self10.y *= 2.0;
	var self11 = self1;
	self11.x -= projected.x;
	self11.y -= projected.y;
	return self1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.orthoNormalize = function(u,v) {
	var self = u;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self2 = self;
		self2.x /= length;
		self2.y /= length;
	}
	var self3 = v;
	var this1 = new hxmath_math_Vector2Default(self3.x,self3.y);
	var self4 = this1;
	var s = (self4.x * u.x + self4.y * u.y) / (u.x * u.x + u.y * u.y);
	var self5 = u;
	var self6 = self5;
	var value = self6.x;
	var self7 = self4;
	self7.x = value;
	var self8 = self5;
	var value1 = self8.y;
	var self9 = self4;
	self9.y = value1;
	var self10 = self4;
	self10.x *= s;
	self10.y *= s;
	var a = self4;
	var self11 = v;
	self11.x -= a.x;
	self11.y -= a.y;
	var self12 = v;
	var self13 = self12;
	var length1 = Math.sqrt(self13.x * self13.x + self13.y * self13.y);
	if(length1 > 0.0) {
		var self14 = self12;
		self14.x /= length1;
		self14.y /= length1;
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.set = function(this1,x,y) {
	var self = this1;
	self.x = x;
	self.y = y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.multiplyWith = function(this1,s) {
	var self = this1;
	self.x *= s;
	self.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.divideWith = function(this1,s) {
	var self = this1;
	self.x /= s;
	self.y /= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.addWith = function(this1,a) {
	var self = this1;
	self.x += a.x;
	self.y += a.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.subtractWith = function(this1,a) {
	var self = this1;
	self.x -= a.x;
	self.y -= a.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.maxWith = function(this1,a) {
	var self = this1;
	self.x = Math.max(self.x,a.x);
	self.y = Math.max(self.y,a.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.minWith = function(this1,a) {
	var self = this1;
	self.x = Math.min(self.x,a.x);
	self.y = Math.min(self.y,a.y);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.projectOnto = function(this1,a) {
	var self = this1;
	var s = (self.x * a.x + self.y * a.y) / (a.x * a.x + a.y * a.y);
	var self1 = a;
	var self2 = self1;
	var value = self2.x;
	var self3 = self;
	self3.x = value;
	var self4 = self1;
	var value1 = self4.y;
	var self5 = self;
	self5.y = value1;
	var self6 = self;
	self6.x *= s;
	self6.y *= s;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.reflectBy = function(this1,normal) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	var s = (self2.x * normal.x + self2.y * normal.y) / (normal.x * normal.x + normal.y * normal.y);
	var self3 = normal;
	var self4 = self3;
	var value = self4.x;
	var self5 = self2;
	self5.x = value;
	var self6 = self3;
	var value1 = self6.y;
	var self7 = self2;
	self7.y = value1;
	var self8 = self2;
	self8.x *= s;
	self8.y *= s;
	var projected = self2;
	var self9 = projected;
	self9.x *= 2.0;
	self9.y *= 2.0;
	var self10 = self;
	self10.x -= projected.x;
	self10.y -= projected.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyTo = function(this1,target) {
	var self = this1;
	var self1 = self;
	var value = self1.x;
	var self2 = target;
	self2.x = value;
	var self3 = self;
	var value1 = self3.y;
	var self4 = target;
	self4.y = value1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyToShape = function(this1,target) {
	var self = this1;
	target.x = self.x;
	target.y = self.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.copyFromShape = function(this1,source) {
	var self = this1;
	self.x = source.x;
	self.y = source.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.clone = function(this1) {
	var self = this1;
	var this2 = new hxmath_math_Vector2Default(self.x,self.y);
	return this2;
};
hxmath_math__$Vector2_Vector2_$Impl_$.getArrayElement = function(this1,i) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x;
	case 1:
		return self.y;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.setArrayElement = function(this1,i,value) {
	var self = this1;
	switch(i) {
	case 0:
		return self.x = value;
	case 1:
		return self.y = value;
	default:
		throw new js__$Boot_HaxeError("Invalid element");
	}
};
hxmath_math__$Vector2_Vector2_$Impl_$.applyNegate = function(this1) {
	var self = this1;
	self.x = -self.x;
	self.y = -self.y;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.applyScalarFunc = function(this1,func) {
	var self = this1;
	var self1 = self;
	var value = func(self1.x);
	var self2 = self;
	self2.x = value;
	var self3 = self;
	var value1 = func(self3.y);
	var self4 = self;
	self4.y = value1;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.angleWith = function(this1,b) {
	var self = this1;
	var self1 = self;
	var self2 = b;
	return Math.acos((self.x * b.x + self.y * b.y) / (Math.sqrt(self1.x * self1.x + self1.y * self1.y) * Math.sqrt(self2.x * self2.x + self2.y * self2.y)));
};
hxmath_math__$Vector2_Vector2_$Impl_$.signedAngleWith = function(this1,b) {
	var self = this1;
	var x = self.x * b.y - b.x * self.y;
	var self1 = self;
	var self2 = self1;
	var self3 = b;
	return (Math.abs(x) < 0 ? 0 : x <= 0 ? -1 : 1) * Math.acos((self1.x * b.x + self1.y * b.y) / (Math.sqrt(self2.x * self2.x + self2.y * self2.y) * Math.sqrt(self3.x * self3.x + self3.y * self3.y)));
};
hxmath_math__$Vector2_Vector2_$Impl_$.distanceTo = function(this1,b) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	self2.x -= b.x;
	self2.y -= b.y;
	var self3 = self2;
	return Math.sqrt(self3.x * self3.x + self3.y * self3.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.normalize = function(this1) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length > 0.0) {
		var self2 = self;
		self2.x /= length;
		self2.y /= length;
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.normalizeTo = function(this1,newLength) {
	var self = this1;
	var self1 = self;
	var self2 = self1;
	var length = Math.sqrt(self2.x * self2.x + self2.y * self2.y);
	if(length > 0.0) {
		var self3 = self1;
		self3.x /= length;
		self3.y /= length;
	}
	var self4 = self;
	self4.x *= newLength;
	self4.y *= newLength;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.clamp = function(this1,min,max) {
	var self = this1;
	var self1 = self;
	var length = Math.sqrt(self1.x * self1.x + self1.y * self1.y);
	if(length < min) {
		var self2 = self;
		var self3 = self2;
		var self4 = self3;
		var length1 = Math.sqrt(self4.x * self4.x + self4.y * self4.y);
		if(length1 > 0.0) {
			var self5 = self3;
			self5.x /= length1;
			self5.y /= length1;
		}
		var self6 = self2;
		self6.x *= min;
		self6.y *= min;
	} else if(length > max) {
		var self7 = self;
		var self8 = self7;
		var self9 = self8;
		var length2 = Math.sqrt(self9.x * self9.x + self9.y * self9.y);
		if(length2 > 0.0) {
			var self10 = self8;
			self10.x /= length2;
			self10.y /= length2;
		}
		var self11 = self7;
		self11.x *= max;
		self11.y *= max;
	}
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotate = function(this1,angle,pivot) {
	var self = this1;
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	var dx = self.x - pivot.x;
	var dy = self.y - pivot.y;
	self.x = dx * Math.cos(angle) - dy * Math.sin(angle);
	self.y = dx * Math.sin(angle) + dy * Math.cos(angle);
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotateLeft = function(this1) {
	var self = this1;
	var newX = -self.y;
	self.y = self.x;
	self.x = newX;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.rotateRight = function(this1) {
	var self = this1;
	var newX = self.y;
	self.y = -self.x;
	self.x = newX;
	return self;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_zero = function() {
	var this1 = new hxmath_math_Vector2Default(0.0,0.0);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_xAxis = function() {
	var this1 = new hxmath_math_Vector2Default(1.0,0.0);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_yAxis = function() {
	var this1 = new hxmath_math_Vector2Default(0.0,1.0);
	return this1;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_length = function(this1) {
	var self = this1;
	return Math.sqrt(self.x * self.x + self.y * self.y);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_lengthSq = function(this1) {
	var self = this1;
	return self.x * self.x + self.y * self.y;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_angle = function(this1) {
	var self = this1;
	return Math.atan2(self.y,self.x);
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_normal = function(this1) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	var self3 = self2;
	var length = Math.sqrt(self3.x * self3.x + self3.y * self3.y);
	if(length > 0.0) {
		var self4 = self2;
		self4.x /= length;
		self4.y /= length;
	}
	return self2;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_rotatedLeft = function(this1) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	var newX = -self2.y;
	self2.y = self2.x;
	self2.x = newX;
	return self2;
};
hxmath_math__$Vector2_Vector2_$Impl_$.get_rotatedRight = function(this1) {
	var self = this1;
	var self1 = self;
	var this2 = new hxmath_math_Vector2Default(self1.x,self1.y);
	var self2 = this2;
	var newX = self2.y;
	self2.y = -self2.x;
	self2.x = newX;
	return self2;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
String.__name__ = true;
Array.__name__ = true;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
echo_Body.ids = 0;
echo_shape_Circle._pool = new glib_Pool(echo_shape_Circle);
echo_shape_Rect._pool = new glib_Pool(echo_shape_Rect);
echo_util_QuadTree.max_depth = 5;
echo_util_QuadTree.max_objects = 5;
echo_util_QuadTree._pool = new glib_Pool(echo_util_QuadTree);
glib__$Color_Color_$Impl_$.TRANSPARENT = 0;
glib__$Color_Color_$Impl_$.WHITE = -1;
glib__$Color_Color_$Impl_$.GRAY = -8355712;
glib__$Color_Color_$Impl_$.BLACK = -16777216;
glib__$Color_Color_$Impl_$.GREEN = -16744448;
glib__$Color_Color_$Impl_$.LIME = -16711936;
glib__$Color_Color_$Impl_$.YELLOW = -256;
glib__$Color_Color_$Impl_$.ORANGE = -23296;
glib__$Color_Color_$Impl_$.RED = -65536;
glib__$Color_Color_$Impl_$.PURPLE = -8388480;
glib__$Color_Color_$Impl_$.BLUE = -16776961;
glib__$Color_Color_$Impl_$.BROWN = -7650029;
glib__$Color_Color_$Impl_$.PINK = -16181;
glib__$Color_Color_$Impl_$.MAGENTA = -65281;
glib__$Color_Color_$Impl_$.CYAN = -16711681;
glib__$Color_Color_$Impl_$.COLOR_REGEX = new EReg("^(0x|#)(([A-F0-9]{2}){3,4})$","i");
hxmath_math__$IntVector2_IntVector2_$Impl_$.elementCount = 2;
hxmath_math_MathUtil.eps = 1e-6;
hxmath_math__$Vector2_Vector2_$Impl_$.elementCount = 2;
Main.main();
})();
